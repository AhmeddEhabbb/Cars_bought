# -*- coding: utf-8 -*-
"""Car_Sales_Price_prediciton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arXWRqmysXZnGuI04mQCL2ylU4fguwte

Only for Colab
"""


#from google.colab import files


#uploaded = files.upload()

"""Libraries and Data Read"""

# importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#importing the dataset
dataset = pd.read_csv('car_sales.csv', encoding='ISO-8859-1')

"""Data Preproccessing

  

"""

# drop unwanted columns

# define X & Y

X = dataset.iloc[:,2:8].values

Y = dataset.iloc[:,8].values

# Ensure no missing values in X and Y
assert not np.any(pd.isnull(X)), "Features contain missing values"
assert not np.any(pd.isnull(Y)), "Target contains missing values"

# Discretize the target variable into categories
bins = [0, 20000, 40000, np.inf]  # Adjust bins according to your dataset
labels = ['Low', 'Medium', 'High']
Y_binned = pd.cut(Y, bins=bins, labels=labels)

# Encoding Categorical data (Country col)

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
X[:,0] = labelencoder_X.fit_transform(X[:,0])


# Data Spliting

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)

# Data Scaling

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

"""Model Structure

First Regressor : Linear regression

"""

"""Linear Regression"""

from sklearn.linear_model import LinearRegression
linear_reg = LinearRegression()
linear_reg.fit(X_train, Y_train)

# Make predictions
Y_pred_linear = linear_reg.predict(X_test)

# Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
mse_linear = mean_squared_error(Y_test, Y_pred_linear)
r2_linear = r2_score(Y_test, Y_pred_linear)
print('Linear Regression - Mean Squared Error:', mse_linear)
print('Linear Regression - R-squared:', r2_linear)

"""End of Linear Reg ^^^^^^^^^

Second Regressor : Random Forest Regression
"""

"""Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)
rf_regressor.fit(X_train, Y_train)

# Make predictions
Y_pred_rf = rf_regressor.predict(X_test)

# Evaluate the model
mse_rf = mean_squared_error(Y_test, Y_pred_rf)
r2_rf = r2_score(Y_test, Y_pred_rf)
print('Random Forest Regression - Mean Squared Error:', mse_rf)
print('Random Forest Regression - R-squared:', r2_rf)

"""End of Random Forest Model ^^^^^^^




Third Regressor : Gradient Boosting Regression
"""

"""Gradient Boosting Regression"""

from sklearn.ensemble import GradientBoostingRegressor
gb_regressor = GradientBoostingRegressor(n_estimators=100, random_state=42)
gb_regressor.fit(X_train, Y_train)

# Make predictions
Y_pred_gb = gb_regressor.predict(X_test)

# Evaluate the model
mse_gb = mean_squared_error(Y_test, Y_pred_gb)
r2_gb = r2_score(Y_test, Y_pred_gb)
print('Gradient Boosting Regression - Mean Squared Error:', mse_gb)
print('Gradient Boosting Regression - R-squared:', r2_gb)

"""Test Input"""

"""Test Input"""

test_input = sc_X.transform([[labelencoder_X.transform(["Algeria"])[0], 1, 43.15289747, 53798.55112, 11160.35506, 638467.1773]])

predicted_price_linear = linear_reg.predict(test_input)[0]
predicted_price_rf = rf_regressor.predict(test_input)[0]
predicted_price_gb = gb_regressor.predict(test_input)[0]

print('Test Input Predicted Car Price (Linear Regression):', predicted_price_linear)
print('Test Input Predicted Car Price (Random Forest Regression):', predicted_price_rf)
print('Test Input Predicted Car Price (Gradient Boosting Regression):', predicted_price_gb)

"""Comparison"""

"""Comparison"""

# Plot Actual vs. Predicted Prices for all models
plt.figure(figsize=(18, 6))

# Linear Regression
plt.subplot(1, 3, 1)
plt.scatter(Y_test, Y_pred_linear)
plt.xlabel("Actual Car Prices")
plt.ylabel("Predicted Car Prices (Linear Regression)")
plt.title("Linear Regression: Actual vs. Predicted Car Prices")

# Random Forest Regression
plt.subplot(1, 3, 2)
plt.scatter(Y_test, Y_pred_rf)
plt.xlabel("Actual Car Prices")
plt.ylabel("Predicted Car Prices (Random Forest)")
plt.title("Random Forest: Actual vs. Predicted Car Prices")

# Gradient Boosting Regression
plt.subplot(1, 3, 3)
plt.scatter(Y_test, Y_pred_gb)
plt.xlabel("Actual Car Prices")
plt.ylabel("Predicted Car Prices (Gradient Boosting)")
plt.title("Gradient Boosting: Actual vs. Predicted Car Prices")

plt.tight_layout()
plt.show()